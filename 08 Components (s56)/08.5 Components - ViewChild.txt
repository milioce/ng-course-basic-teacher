servers/servers.component.html
------------------------------------------------------------------------------
 + Accedemos a una referencia local en el html

<p #pRef>Testing ViewChild, this is the default value</p>


servers/servers.component.ts
------------------------------------------------------------------------------
 + Accedemos a la referencia de la plantilla usando ViewChild

  @ViewChild('pRef', {static: false}) pRef: ElementRef;

  constructor() {
    setTimeout(() => {
      this.pRef.nativeElement.innerHTML = 'DOM updated successfully accessing with ElementRef!!!';
      this.pRef.nativeElement.setAttribute('style', 'color: red');
    }, 3000);
  }


@ViewChild(selector, {static: boolean})
  + Detector de cambios busca el primer elemento o directiva que coincida con el selector en el DOM.
    Si el Dom cambia, y un nuevo hijo coincide con el selector la propiedad cambia.

  + Ciclo de vida del componente.
    - En el constructor this.pRef es undefined (error pRef.nativeElement)
    -

  + Selectores válidos son
    - un nombre de variable usaddo como referencia (string)  @ViewChild('pRef')
    - servicios
    - componentes
    - TemplateRef (<ng-template>)

 + static: false (default) => resuelve el query selector después del change Detector
           true => resuelve antes de que el detector de cambios se ejecute


 servers/servers.component.ts
------------------------------------------------------------------------------
 + probamos en los distintos eventos del ciclo de vida
   -constructor = no hay datos disponibles.
   - OnInit => todavía no tiene valor, porque la vista no se ha inicializado
   - AfterViewInt: Ya tiene valor
   - Si cambiamos { static: true } ya tiene valor en el OnInit

  export class ServersComponent implements OnInit, AfterViewInit {
    @ViewChild('pRef', {static: false}) pRef: ElementRef;
    ...
    ngOnInit() {
      console.log('onInit', this.pRef.nativeElement);
    }

    ngAfterViewInit() {
      console.log('afterViewInit', this.pRef.nativeElement);
    }
    ...
  }

---------------

   - onChanges: Se ejecuta antes de onInit y cada vez que un input cambia.
                Si no tiene inputs o no le pasas ninguno, no se ejecuta
                Recibe el valor anterior y el nuevo

   - onInit : El componente se ha inicializado,
              Se ejecuta una vez, después del primer ngOnChanges()
              Los inputs ya están disponibles

   - doCheck(): Cada vez que comprueba las propiedades de entrada del componente.
                Se ejecuta en cada ejecución del detector de cambios.
                En la primera ejecuciónh después de OnInit()

   - afterContentInit: Se ha proyectado la vista externa <ng-content>
                       Se ejecuta una vez, después del primer doCheck()

   - afterContentChecked: Comprueba el contenido proyectado.
                          Se ejecuta después de afterContentInit, y de cada doCheck()

   - AfterViewInit: se ha inicializado la vista del componente y sus hijos
                    Se ejecuta una vez, despues del primer ngAfterContentChecked

   - AfterViewChecked: Comprueba la vista y las de sus hijos
                       Se ejecuta despues de afterViewInit, después de cada afterContentChecked().

   - onDestroy: Se ejecuta justo antes de destruir el componente.
